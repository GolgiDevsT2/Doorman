/* IS_AUTOGENERATED_SO_ALLOW_AUTODELETE=YES */
/* The previous line is to allow auto deletion */

#import "DoormanSvcGen.h"

@implementation AccessRequest

@synthesize unameIsSet;
- (NSString *)getUname
{
    return uname;
}
- (void)setUname:(NSString *)_uname
{
    uname = _uname;
    unameIsSet = (_uname != nil) ? YES : NO;
}
@synthesize keyIsSet;
- (NSString *)getKey
{
    return key;
}
- (void)setKey:(NSString *)_key
{
    key = _key;
    keyIsSet = (_key != nil) ? YES : NO;
}
@synthesize latIsSet;
- (NSString *)getLat
{
    return lat;
}
- (void)setLat:(NSString *)_lat
{
    lat = _lat;
    latIsSet = (_lat != nil) ? YES : NO;
}
@synthesize lonIsSet;
- (NSString *)getLon
{
    return lon;
}
- (void)setLon:(NSString *)_lon
{
    lon = _lon;
    lonIsSet = (_lon != nil) ? YES : NO;
}
@synthesize authIsSet;
- (NSString *)getAuth
{
    return auth;
}
- (void)setAuth:(NSString *)_auth
{
    auth = _auth;
    authIsSet = (_auth != nil) ? YES : NO;
}
@synthesize tshIsSet;
- (NSInteger)getTsh
{
    return tsh;
}
- (void)setTsh:(NSInteger )_tsh
{
    tsh = _tsh;
    tshIsSet = YES;
}
@synthesize tslIsSet;
- (NSInteger)getTsl
{
    return tsl;
}
- (void)setTsl:(NSInteger )_tsl
{
    tsl = _tsl;
    tslIsSet = YES;
}

+ (AccessRequest *)deserialiseFromString: (NSString *)string
{
    return [AccessRequest deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (AccessRequest *)deserialiseFromPayload: (GolgiPayload *)payload
{
    AccessRequest *inst = [[AccessRequest alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"1:"]) != nil){
            inst.uname = str;
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"2:"]) != nil){
            inst.key = str;
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"3:"]) != nil){
            inst.lat = str;
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"4:"]) != nil){
            inst.lon = str;
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"5:"]) != nil){
            inst.auth = str;
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"6:"]) != nil){
            inst.tsh = [num intValue];
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"7:"]) != nil){
            inst.tsl = [num intValue];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(unameIsSet){
        [_str appendFormat:@"%@1: \"%@\"\n", prefix, [CSL  NTLEscapeString:uname]];
    }
    if(keyIsSet){
        [_str appendFormat:@"%@2: \"%@\"\n", prefix, [CSL  NTLEscapeString:key]];
    }
    if(latIsSet){
        [_str appendFormat:@"%@3: \"%@\"\n", prefix, [CSL  NTLEscapeString:lat]];
    }
    if(lonIsSet){
        [_str appendFormat:@"%@4: \"%@\"\n", prefix, [CSL  NTLEscapeString:lon]];
    }
    if(authIsSet){
        [_str appendFormat:@"%@5: \"%@\"\n", prefix, [CSL  NTLEscapeString:auth]];
    }
    if(tshIsSet){
        [_str appendFormat:@"%@6: %ld\n", prefix, (long)tsh];
    }
    if(tslIsSet){
        [_str appendFormat:@"%@7: %ld\n", prefix, (long)tsl];
    }

    return [NSString stringWithString:_str];
}

- (AccessRequest *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        uname = @"";
        unameIsSet = defIsSet;
        key = @"";
        keyIsSet = defIsSet;
        lat = @"";
        latIsSet = defIsSet;
        lon = @"";
        lonIsSet = defIsSet;
        auth = @"";
        authIsSet = defIsSet;
    }

    return self;

}

@end
@implementation AccessResponse

@synthesize codeIsSet;
- (NSString *)getCode
{
    return code;
}
- (void)setCode:(NSString *)_code
{
    code = _code;
    codeIsSet = (_code != nil) ? YES : NO;
}

+ (AccessResponse *)deserialiseFromString: (NSString *)string
{
    return [AccessResponse deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (AccessResponse *)deserialiseFromPayload: (GolgiPayload *)payload
{
    AccessResponse *inst = [[AccessResponse alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"1:"]) != nil){
            inst.code = str;
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(codeIsSet){
        [_str appendFormat:@"%@1: \"%@\"\n", prefix, [CSL  NTLEscapeString:code]];
    }

    return [NSString stringWithString:_str];
}

- (AccessResponse *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        code = @"";
        codeIsSet = defIsSet;
    }

    return self;

}

@end
@implementation KeyRequest

@synthesize requestIdIsSet;
- (NSString *)getRequestId
{
    return requestId;
}
- (void)setRequestId:(NSString *)_requestId
{
    requestId = _requestId;
    requestIdIsSet = (_requestId != nil) ? YES : NO;
}
@synthesize senderIdIsSet;
- (NSString *)getSenderId
{
    return senderId;
}
- (void)setSenderId:(NSString *)_senderId
{
    senderId = _senderId;
    senderIdIsSet = (_senderId != nil) ? YES : NO;
}
@synthesize authIsSet;
- (NSString *)getAuth
{
    return auth;
}
- (void)setAuth:(NSString *)_auth
{
    auth = _auth;
    authIsSet = (_auth != nil) ? YES : NO;
}
@synthesize dayIsSet;
- (NSInteger)getDay
{
    return day;
}
- (void)setDay:(NSInteger )_day
{
    day = _day;
    dayIsSet = YES;
}
@synthesize monthIsSet;
- (NSInteger)getMonth
{
    return month;
}
- (void)setMonth:(NSInteger )_month
{
    month = _month;
    monthIsSet = YES;
}
@synthesize yearIsSet;
- (NSInteger)getYear
{
    return year;
}
- (void)setYear:(NSInteger )_year
{
    year = _year;
    yearIsSet = YES;
}
@synthesize msgidIsSet;
- (NSString *)getMsgid
{
    return msgid;
}
- (void)setMsgid:(NSString *)_msgid
{
    msgid = _msgid;
    msgidIsSet = (_msgid != nil) ? YES : NO;
}

+ (KeyRequest *)deserialiseFromString: (NSString *)string
{
    return [KeyRequest deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (KeyRequest *)deserialiseFromPayload: (GolgiPayload *)payload
{
    KeyRequest *inst = [[KeyRequest alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"1:"]) != nil){
            inst.requestId = str;
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"2:"]) != nil){
            inst.senderId = str;
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"3:"]) != nil){
            inst.auth = str;
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"4:"]) != nil){
            inst.day = [num intValue];
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"5:"]) != nil){
            inst.month = [num intValue];
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"6:"]) != nil){
            inst.year = [num intValue];
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"7:"]) != nil){
            inst.msgid = str;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(requestIdIsSet){
        [_str appendFormat:@"%@1: \"%@\"\n", prefix, [CSL  NTLEscapeString:requestId]];
    }
    if(senderIdIsSet){
        [_str appendFormat:@"%@2: \"%@\"\n", prefix, [CSL  NTLEscapeString:senderId]];
    }
    if(authIsSet){
        [_str appendFormat:@"%@3: \"%@\"\n", prefix, [CSL  NTLEscapeString:auth]];
    }
    if(dayIsSet){
        [_str appendFormat:@"%@4: %ld\n", prefix, (long)day];
    }
    if(monthIsSet){
        [_str appendFormat:@"%@5: %ld\n", prefix, (long)month];
    }
    if(yearIsSet){
        [_str appendFormat:@"%@6: %ld\n", prefix, (long)year];
    }
    if(msgidIsSet){
        [_str appendFormat:@"%@7: \"%@\"\n", prefix, [CSL  NTLEscapeString:msgid]];
    }

    return [NSString stringWithString:_str];
}

- (KeyRequest *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        requestId = @"";
        requestIdIsSet = defIsSet;
        senderId = @"";
        senderIdIsSet = defIsSet;
        auth = @"";
        authIsSet = defIsSet;
        msgid = @"";
    }

    return self;

}

@end
@implementation KeyResponse

@synthesize codeIsSet;
- (NSString *)getCode
{
    return code;
}
- (void)setCode:(NSString *)_code
{
    code = _code;
    codeIsSet = (_code != nil) ? YES : NO;
}
@synthesize unameIsSet;
- (NSString *)getUname
{
    return uname;
}
- (void)setUname:(NSString *)_uname
{
    uname = _uname;
    unameIsSet = (_uname != nil) ? YES : NO;
}
@synthesize keyIsSet;
- (NSString *)getKey
{
    return key;
}
- (void)setKey:(NSString *)_key
{
    key = _key;
    keyIsSet = (_key != nil) ? YES : NO;
}
@synthesize dayIsSet;
- (NSInteger)getDay
{
    return day;
}
- (void)setDay:(NSInteger )_day
{
    day = _day;
    dayIsSet = YES;
}
@synthesize monthIsSet;
- (NSInteger)getMonth
{
    return month;
}
- (void)setMonth:(NSInteger )_month
{
    month = _month;
    monthIsSet = YES;
}
@synthesize yearIsSet;
- (NSInteger)getYear
{
    return year;
}
- (void)setYear:(NSInteger )_year
{
    year = _year;
    yearIsSet = YES;
}
@synthesize msgidIsSet;
- (NSString *)getMsgid
{
    return msgid;
}
- (void)setMsgid:(NSString *)_msgid
{
    msgid = _msgid;
    msgidIsSet = (_msgid != nil) ? YES : NO;
}

+ (KeyResponse *)deserialiseFromString: (NSString *)string
{
    return [KeyResponse deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (KeyResponse *)deserialiseFromPayload: (GolgiPayload *)payload
{
    KeyResponse *inst = [[KeyResponse alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"1:"]) != nil){
            inst.code = str;
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"2:"]) != nil){
            inst.uname = str;
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"3:"]) != nil){
            inst.key = str;
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"4:"]) != nil){
            inst.day = [num intValue];
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"5:"]) != nil){
            inst.month = [num intValue];
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"6:"]) != nil){
            inst.year = [num intValue];
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"7:"]) != nil){
            inst.msgid = str;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(codeIsSet){
        [_str appendFormat:@"%@1: \"%@\"\n", prefix, [CSL  NTLEscapeString:code]];
    }
    if(unameIsSet){
        [_str appendFormat:@"%@2: \"%@\"\n", prefix, [CSL  NTLEscapeString:uname]];
    }
    if(keyIsSet){
        [_str appendFormat:@"%@3: \"%@\"\n", prefix, [CSL  NTLEscapeString:key]];
    }
    if(dayIsSet){
        [_str appendFormat:@"%@4: %ld\n", prefix, (long)day];
    }
    if(monthIsSet){
        [_str appendFormat:@"%@5: %ld\n", prefix, (long)month];
    }
    if(yearIsSet){
        [_str appendFormat:@"%@6: %ld\n", prefix, (long)year];
    }
    if(msgidIsSet){
        [_str appendFormat:@"%@7: \"%@\"\n", prefix, [CSL  NTLEscapeString:msgid]];
    }

    return [NSString stringWithString:_str];
}

- (KeyResponse *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        code = @"";
        codeIsSet = defIsSet;
        uname = @"";
        unameIsSet = defIsSet;
        key = @"";
        keyIsSet = defIsSet;
        msgid = @"";
    }

    return self;

}

@end
@implementation Doorman_sendAccessRequest_reqArg
@synthesize reqIsSet;
- (AccessRequest *)getReq
{
    return req;
}
- (void)setReq:(AccessRequest *)_req
{
    req = _req;
    reqIsSet = (_req != nil) ? YES : NO;
}
+ (Doorman_sendAccessRequest_reqArg *)deserialiseFromString: (NSString *)string
{
    return [Doorman_sendAccessRequest_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}
+ (Doorman_sendAccessRequest_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    Doorman_sendAccessRequest_reqArg *inst = [[Doorman_sendAccessRequest_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;
    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setReq:[AccessRequest deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setReq:nil];
        }
    }
    if([inst getReq] == nil){
        corrupt = YES;
    }
    return (corrupt) ? nil : inst;
}
- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}
- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    if(reqIsSet){
        [_str appendString:[req serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }
    return [NSString stringWithString:_str];
}
- (Doorman_sendAccessRequest_reqArg *)init
{
    return [self initWithIsSet:YES];
}
- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        req = [[AccessRequest alloc] initWithIsSet:defIsSet];
        reqIsSet = defIsSet;
    }
    return self;
}
@end
@implementation Doorman_sendAccessRequest_rspArg
@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}
- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}
@synthesize resultIsSet;
- (AccessResponse *)getResult
{
    return result;
}
- (void)setResult:(AccessResponse *)_result
{
    result = _result;
    resultIsSet = (_result != nil) ? YES : NO;
}
@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}
- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}
+ (Doorman_sendAccessRequest_rspArg *)deserialiseFromString: (NSString *)string
{
    return [Doorman_sendAccessRequest_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}
+ (Doorman_sendAccessRequest_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    Doorman_sendAccessRequest_rspArg *inst = [[Doorman_sendAccessRequest_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;
    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }
    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"2"]) != nil){
            [inst setResult:[AccessResponse deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setResult:nil];
        }
    }
    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }
    return (corrupt) ? nil : inst;
}
- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}
- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(resultIsSet){
        [_str appendString:[result serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "2"]]];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }
    return [NSString stringWithString:_str];
}
- (Doorman_sendAccessRequest_rspArg *)init
{
    return [self initWithIsSet:YES];
}
- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        result = [[AccessResponse alloc] initWithIsSet:defIsSet];
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }
    return self;
}
@end
@implementation Doorman_sendKeyRequest_reqArg
@synthesize reqIsSet;
- (KeyRequest *)getReq
{
    return req;
}
- (void)setReq:(KeyRequest *)_req
{
    req = _req;
    reqIsSet = (_req != nil) ? YES : NO;
}
+ (Doorman_sendKeyRequest_reqArg *)deserialiseFromString: (NSString *)string
{
    return [Doorman_sendKeyRequest_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}
+ (Doorman_sendKeyRequest_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    Doorman_sendKeyRequest_reqArg *inst = [[Doorman_sendKeyRequest_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;
    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setReq:[KeyRequest deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setReq:nil];
        }
    }
    if([inst getReq] == nil){
        corrupt = YES;
    }
    return (corrupt) ? nil : inst;
}
- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}
- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    if(reqIsSet){
        [_str appendString:[req serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }
    return [NSString stringWithString:_str];
}
- (Doorman_sendKeyRequest_reqArg *)init
{
    return [self initWithIsSet:YES];
}
- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        req = [[KeyRequest alloc] initWithIsSet:defIsSet];
        reqIsSet = defIsSet;
    }
    return self;
}
@end
@implementation Doorman_sendKeyRequest_rspArg
@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}
- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}
@synthesize resultIsSet;
- (KeyResponse *)getResult
{
    return result;
}
- (void)setResult:(KeyResponse *)_result
{
    result = _result;
    resultIsSet = (_result != nil) ? YES : NO;
}
@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}
- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}
+ (Doorman_sendKeyRequest_rspArg *)deserialiseFromString: (NSString *)string
{
    return [Doorman_sendKeyRequest_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}
+ (Doorman_sendKeyRequest_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    Doorman_sendKeyRequest_rspArg *inst = [[Doorman_sendKeyRequest_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;
    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }
    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"2"]) != nil){
            [inst setResult:[KeyResponse deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setResult:nil];
        }
    }
    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }
    return (corrupt) ? nil : inst;
}
- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}
- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(resultIsSet){
        [_str appendString:[result serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "2"]]];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }
    return [NSString stringWithString:_str];
}
- (Doorman_sendKeyRequest_rspArg *)init
{
    return [self initWithIsSet:YES];
}
- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        result = [[KeyResponse alloc] initWithIsSet:defIsSet];
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }
    return self;
}
@end
@implementation DoormanSendAccessRequestExceptionBundle
@synthesize golgiException;
- (DoormanSendAccessRequestExceptionBundle *) init
{
    self = [super init];
    golgiException = nil;
    return self;
}
@end

@interface SendAccessRequestInternalResultSender : NSObject <DoormanSendAccessRequestResultSender>
{
    NSString *sender;
    NSString *msgId;
    Doorman_sendAccessRequest_rspArg *rsp;
}
- (SendAccessRequestInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation SendAccessRequestInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (SendAccessRequestInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[Doorman_sendAccessRequest_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"sendAccessRequest.Doorman" withMessageId:msgId];
}

- (void)successWithResult:(AccessResponse *)result
{
    [rsp setInternalSuccess_:1];
    [rsp setResult: result];
    [self sendResponse];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

@end

@interface SendAccessRequestInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<DoormanSendAccessRequestRequestReceiver> receiver;
    void (^userHandler)(id<DoormanSendAccessRequestResultSender> resultSender, AccessRequest * req);
}

- (SendAccessRequestInternalRequestHandler *)initWithReceiver:(id<DoormanSendAccessRequestRequestReceiver>)receiver;
- (SendAccessRequestInternalRequestHandler *)initWithHandler:(void (^)(id<DoormanSendAccessRequestResultSender> resultSender, AccessRequest * req))userHandler;
@end

@implementation SendAccessRequestInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    Doorman_sendAccessRequest_reqArg *req = [Doorman_sendAccessRequest_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"sendAccessRequest.Doorman" withMessageId:msgId];
    }
    else{
        // Process req here
        SendAccessRequestInternalResultSender *resultSender;
        resultSender = [SendAccessRequestInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver sendAccessRequestWithResultSender:resultSender andReq:[req getReq]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getReq]);    }
    }
}

- (SendAccessRequestInternalRequestHandler *)initWithReceiver:(id<DoormanSendAccessRequestRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (SendAccessRequestInternalRequestHandler *)initWithHandler:(void (^)(id<DoormanSendAccessRequestResultSender> resultSender, AccessRequest * req))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface SendAccessRequestInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<DoormanSendAccessRequestResultReceiver> receiver;
    void (^handler)(AccessResponse *Result,DoormanSendAccessRequestExceptionBundle *exceptionBundle);
}

- (SendAccessRequestInternalResponseHandler *)initWithReceiver:(id<DoormanSendAccessRequestResultReceiver>)receiver orHandler:(void (^)(AccessResponse *Result,DoormanSendAccessRequestExceptionBundle *exceptionBundle))handler;
@end
@implementation SendAccessRequestInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    Doorman_sendAccessRequest_rspArg *rsp = [Doorman_sendAccessRequest_rspArg deserialiseFromString:payload];
    DoormanSendAccessRequestExceptionBundle *exBundle = [[DoormanSendAccessRequestExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(nil, exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver successWithResult:[rsp getResult]];
        }
        else{ // Must have a handler
            handler([rsp getResult], nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(nil, exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'sendAccessRequest' in Golgi Service 'Doorman' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (SendAccessRequestInternalResponseHandler *)initWithReceiver:(id<DoormanSendAccessRequestResultReceiver>)_receiver orHandler:(void (^)(AccessResponse *Result,DoormanSendAccessRequestExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation DoormanSendKeyRequestExceptionBundle
@synthesize golgiException;
- (DoormanSendKeyRequestExceptionBundle *) init
{
    self = [super init];
    golgiException = nil;
    return self;
}
@end

@interface SendKeyRequestInternalResultSender : NSObject <DoormanSendKeyRequestResultSender>
{
    NSString *sender;
    NSString *msgId;
    Doorman_sendKeyRequest_rspArg *rsp;
}
- (SendKeyRequestInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation SendKeyRequestInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (SendKeyRequestInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[Doorman_sendKeyRequest_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"sendKeyRequest.Doorman" withMessageId:msgId];
}

- (void)successWithResult:(KeyResponse *)result
{
    [rsp setInternalSuccess_:1];
    [rsp setResult: result];
    [self sendResponse];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

@end

@interface SendKeyRequestInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<DoormanSendKeyRequestRequestReceiver> receiver;
    void (^userHandler)(id<DoormanSendKeyRequestResultSender> resultSender, KeyRequest * req);
}

- (SendKeyRequestInternalRequestHandler *)initWithReceiver:(id<DoormanSendKeyRequestRequestReceiver>)receiver;
- (SendKeyRequestInternalRequestHandler *)initWithHandler:(void (^)(id<DoormanSendKeyRequestResultSender> resultSender, KeyRequest * req))userHandler;
@end

@implementation SendKeyRequestInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    Doorman_sendKeyRequest_reqArg *req = [Doorman_sendKeyRequest_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"sendKeyRequest.Doorman" withMessageId:msgId];
    }
    else{
        // Process req here
        SendKeyRequestInternalResultSender *resultSender;
        resultSender = [SendKeyRequestInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver sendKeyRequestWithResultSender:resultSender andReq:[req getReq]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getReq]);    }
    }
}

- (SendKeyRequestInternalRequestHandler *)initWithReceiver:(id<DoormanSendKeyRequestRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (SendKeyRequestInternalRequestHandler *)initWithHandler:(void (^)(id<DoormanSendKeyRequestResultSender> resultSender, KeyRequest * req))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface SendKeyRequestInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<DoormanSendKeyRequestResultReceiver> receiver;
    void (^handler)(KeyResponse *Result,DoormanSendKeyRequestExceptionBundle *exceptionBundle);
}

- (SendKeyRequestInternalResponseHandler *)initWithReceiver:(id<DoormanSendKeyRequestResultReceiver>)receiver orHandler:(void (^)(KeyResponse *Result,DoormanSendKeyRequestExceptionBundle *exceptionBundle))handler;
@end
@implementation SendKeyRequestInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    Doorman_sendKeyRequest_rspArg *rsp = [Doorman_sendKeyRequest_rspArg deserialiseFromString:payload];
    DoormanSendKeyRequestExceptionBundle *exBundle = [[DoormanSendKeyRequestExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(nil, exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver successWithResult:[rsp getResult]];
        }
        else{ // Must have a handler
            handler([rsp getResult], nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(nil, exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'sendKeyRequest' in Golgi Service 'Doorman' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (SendKeyRequestInternalResponseHandler *)initWithReceiver:(id<DoormanSendKeyRequestResultReceiver>)_receiver orHandler:(void (^)(KeyResponse *Result,DoormanSendKeyRequestExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end



/********************************************************/
/********************************************************/
/********************************************************/


@implementation DoormanSvc
//
// sendAccessRequest
//
+ (void)sendSendAccessRequestUsingResultHandler:(void (^)(AccessResponse *, DoormanSendAccessRequestExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withReq:(AccessRequest *)req
{
    [self sendSendAccessRequestUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withReq:req];
}

+ (void)sendSendAccessRequestUsingResultHandler:(void (^)(AccessResponse *, DoormanSendAccessRequestExceptionBundle *))resultHandler andDestination:(NSString *)_dst withReq:(AccessRequest *)req
{
    [self sendSendAccessRequestUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withReq:req];
}

+ (void)sendSendAccessRequestUsingResultReceiver:(id<DoormanSendAccessRequestResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withReq:(AccessRequest *)req
{
    [self sendSendAccessRequestUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withReq:req];
}

+ (void)sendSendAccessRequestUsingResultReceiver:(id<DoormanSendAccessRequestResultReceiver>)resultReceiver andDestination:(NSString *)_dst withReq:(AccessRequest *)req
{
    [self sendSendAccessRequestUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withReq:req];
}

//
// sendAccessRequest with transport options and receiver/handler
//
+ (void)sendSendAccessRequestUsingResultReceiver:(id<DoormanSendAccessRequestResultReceiver>)resultReceiver orResultHandler:(void (^)(AccessResponse *, DoormanSendAccessRequestExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withReq:(AccessRequest *)req
{
    NSString *_payload;
    Doorman_sendAccessRequest_reqArg *_reqArg = [[Doorman_sendAccessRequest_reqArg alloc] init];
    SendAccessRequestInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [SendAccessRequestInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setReq:req];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"sendAccessRequest.Doorman" andResponseHandler:_iRspHndlr];

}

//
// sendAccessRequest using closure
//
// + (void)sendSendAccessRequestUsingResultHandler:(void (^)(AccessResponse *, DoormanSendAccessRequestExceptionBundle *))resultHandler andDestination:(NSString *)_dst withReq:(AccessRequest *)req

+ (void)registerSendAccessRequestRequestReceiver:(id<DoormanSendAccessRequestRequestReceiver>)requestReceiver
{
    SendAccessRequestInternalRequestHandler *reqHandler;
    reqHandler = [SendAccessRequestInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"sendAccessRequest.Doorman"];
}

+ (void)registerSendAccessRequestRequestHandler:(void (^)(id<DoormanSendAccessRequestResultSender> resultSender, AccessRequest * req))requestHandler;
{
    SendAccessRequestInternalRequestHandler *reqHandler;
    reqHandler = [SendAccessRequestInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"sendAccessRequest.Doorman"];
}

//
// sendKeyRequest
//
+ (void)sendSendKeyRequestUsingResultHandler:(void (^)(KeyResponse *, DoormanSendKeyRequestExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withReq:(KeyRequest *)req
{
    [self sendSendKeyRequestUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withReq:req];
}

+ (void)sendSendKeyRequestUsingResultHandler:(void (^)(KeyResponse *, DoormanSendKeyRequestExceptionBundle *))resultHandler andDestination:(NSString *)_dst withReq:(KeyRequest *)req
{
    [self sendSendKeyRequestUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withReq:req];
}

+ (void)sendSendKeyRequestUsingResultReceiver:(id<DoormanSendKeyRequestResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withReq:(KeyRequest *)req
{
    [self sendSendKeyRequestUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withReq:req];
}

+ (void)sendSendKeyRequestUsingResultReceiver:(id<DoormanSendKeyRequestResultReceiver>)resultReceiver andDestination:(NSString *)_dst withReq:(KeyRequest *)req
{
    [self sendSendKeyRequestUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withReq:req];
}

//
// sendKeyRequest with transport options and receiver/handler
//
+ (void)sendSendKeyRequestUsingResultReceiver:(id<DoormanSendKeyRequestResultReceiver>)resultReceiver orResultHandler:(void (^)(KeyResponse *, DoormanSendKeyRequestExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withReq:(KeyRequest *)req
{
    NSString *_payload;
    Doorman_sendKeyRequest_reqArg *_reqArg = [[Doorman_sendKeyRequest_reqArg alloc] init];
    SendKeyRequestInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [SendKeyRequestInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setReq:req];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"sendKeyRequest.Doorman" andResponseHandler:_iRspHndlr];

}

//
// sendKeyRequest using closure
//
// + (void)sendSendKeyRequestUsingResultHandler:(void (^)(KeyResponse *, DoormanSendKeyRequestExceptionBundle *))resultHandler andDestination:(NSString *)_dst withReq:(KeyRequest *)req

+ (void)registerSendKeyRequestRequestReceiver:(id<DoormanSendKeyRequestRequestReceiver>)requestReceiver
{
    SendKeyRequestInternalRequestHandler *reqHandler;
    reqHandler = [SendKeyRequestInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"sendKeyRequest.Doorman"];
}

+ (void)registerSendKeyRequestRequestHandler:(void (^)(id<DoormanSendKeyRequestResultSender> resultSender, KeyRequest * req))requestHandler;
{
    SendKeyRequestInternalRequestHandler *reqHandler;
    reqHandler = [SendKeyRequestInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"sendKeyRequest.Doorman"];
}

@end
