#
# Makefile for generating Doorman server component
#
JDIR			=	io/golgi/example/doorman
PKG_DIR         	=       $(HOME)/Golgi-Pkg/LATEST/common
GARRICK_JAR     	=	$(PKG_DIR)/garrick_combined.jar
GOLGI_J2SE_JAR  	=	$(PKG_DIR)/golgi_j2se.jar
PI4J_JAR		=	/opt/pi4j/lib/'*'
LOG_4J_JAR		=	/opt/doorman/lib/apache-log4j-1.2.17/log4j-1.2.17.jar
HTTP_CLIENT_JAR         =	/opt/doorman/lib/httpcomponents-client-4.3.6/lib/'*'
CLASSPATH		=	.:$(GOLGI_J2SE_JAR):$(PI4J_JAR):$(LOG_4J_JAR)
DOORMAN_SERVER_JAR	=	DoormanServer.jar
RTCP			=	$(DOORMAN_SERVER_JAR):$(GOLGI_J2SE_JAR):$(PI4J_JAR):$(LOG_4J_JAR):$(HTTP_CLIENT_JAR)
GOLGI_KEYS              =	$(JDIR)/gen/GolgiKeys.java

include ../Doorman.conf

all : jall

jall:check_all depends keys prep
	@echo $(CLASSPATH)
	java -classpath $(GARRICK_JAR) com.openmindnetworks.golgi.garrick.Garrick -i ../Doorman.thrift -jo $(JDIR)/gen/
	javac -classpath $(CLASSPATH) $(JDIR)/*.java $(JDIR)/gen/*.java
	jar -Mcf $(DOORMAN_SERVER_JAR) io/golgi/example/doorman/gen/*.class io/golgi/example/doorman/*.class

install:
	@echo "Installing"
	if [ ! -d /opt/doorman/bin ]; then \
		mkdir /opt/doorman/bin; \
	fi
	if [ ! -d /opt/doorman/log ]; then \
		mkdir /opt/doorman/log; \
	fi
	touch /opt/doorman/log/doorman.log
	@cp -v $(DOORMAN_SERVER_JAR) /opt/doorman/bin/
	@cp ./etc/init.d/doorman /etc/init.d/doorman
	@cp ./etc/log4j.properties /opt/doorman/log4j.properties
	update-rc.d doorman defaults
	service doorman start

clean:
	@find . -name '*.java' | while read f; do if [ `head -2 $$f | egrep -c "IS_AUTOGENERATED_SO_ALLOW_AUTODELETE=YES"` = "1" ]; then echo "Delete $$f"; rm -f $$f; fi; done
	@find . -name '*.class' | xargs rm
	rm -f $(DOORMAN_SERVER_JAR)

depends : log4j pi4j httpcomponents gpkg

keys:
	mkdir -p $(JDIR)/gen
	@echo "// IS_AUTOGENERATED_SO_ALLOW_AUTODELETE=YES" > $(GOLGI_KEYS)
	@echo "package io.golgi.example.doorman.gen;" >> $(GOLGI_KEYS)
	@echo "public class GolgiKeys {" >> $(GOLGI_KEYS)
	@echo "    public static String DEV_KEY = \"$(shell (cat ../Golgi.DevKey | tr -d ' \r\n'))\";" >> $(GOLGI_KEYS)
	@echo "    public static String APP_KEY = \"$(shell (cat ../Golgi.AppKey | tr -d ' \r\n'))\";" >> $(GOLGI_KEYS)
	@echo "}" >> $(GOLGI_KEYS)

prep:
	@echo "Preparing code base"
	cp io/golgi/example/doorman/DoormanServer.java.default /tmp/
	sed -i.bak s/PKEY_PIN/\"$(PIN)\"/g /tmp/DoormanServer.java.default
	sed -i.bak s/PKEY_ADDRESS/\"$(ADDR)\"/g /tmp/DoormanServer.java.default
	sed -i.bak s/MYSQL_USER/\"doorman\"/g /tmp/DoormanServer.java.default
	sed -i.bak s/MYSQL_PWD/\"$(MYSQL_PWD)\"/g /tmp/DoormanServer.java.default
	cp /tmp/DoormanServer.java.default io/golgi/example/doorman/DoormanServer.java
	rm -f /tmp/DoormanServer.java.default /tmp/DoormanServer.java.default.orig

check_all : 
	@echo -n Checking doorman config files...
	@if [ ! -f ../Golgi.DevKey ]; then \
		echo "failed."; \
		echo "No ../Golgi.DevKey file found .. exiting"; \
		echo "../Golgi.DevKey should contain your Golgi Developer Key"; \
		exit 2; \
	fi
	@if [ ! -f ../Golgi.AppKey ]; then \
		echo "failed."; \
		echo "No ../Golgi.AppKey file found .. exiting"; \
		echo "../Golgi.AppKey should contain your Golgi Application Key"; \
		exit 2; \
	fi
	@if [ ! -f ../Doorman.thrift ]; then \
		echo "failed."; \
		echo "No ../Doorman.thrift file found .. exiting "; \
		echo "../Doorman.thrift should contain your Doorman Thrift definitions - part of the base distribution"; \
		exit 2; \
	fi
	@if [ ! -f ../Doorman.conf ]; then \
		echo "failed."; \
		echo "No ../Doorman.conf file found .. exiting"; \
		echo "../Doorman.conf should contain Doorman configuration for your build. Please refer to the README.md in the top level directory of the package"; \
		exit 2; \
	fi
	@echo "OK"
	
gpkg:
	@if [ ! -d $(HOME)/Golgi-Pkg ]; then \
		echo "No Golgi-Pkg found at default location .. $(HOME)/Golgi-Pkg .. please install"; \
		exit 2; \
	fi


pi4j:
	@if [ ! -d /opt/pi4j/lib ]; then \
		curl -s get.pi4j.com | sudo bash; \
	fi

log4j:
	@if [ ! -d /opt/doorman/lib/apache-log4j-1.2.17 ]; then \
		echo "Fetching apache-log4j-1.2.17"; \
		curl -s http://mirrors.whoishostingthis.com/mirrors/apache/logging/log4j/1.2.17/log4j-1.2.17.tar.gz -o /tmp/log4j-1.2.17.tar.gz; \
		echo "Unpacking log4j"; \
		tar xzf /tmp/log4j-1.2.17.tar.gz -C /tmp; \
		echo "Installing log4j"; \
		sudo mkdir -p /opt/doorman/lib/apache-log4j-1.2.17; \
		sudo cp /tmp/apache-log4j-1.2.17/log4j-1.2.17.jar /opt/doorman/lib/apache-log4j-1.2.17; \
		rm -rf /tmp/log4j-1.2.17.tar.gz /tmp/apache-log4j-1.2.17; \
		echo "Log4j install complete - location /opt/doorman/lib/apache-log4j-1.2.17"; \
	fi

httpcomponents:
	@if [ ! -d /opt/doorman/lib/httpcomponents-client-4.3.6 ]; then \
		echo "Fetching httpcomponents-client-4.3.6"; \
		curl -s http://mirrors.whoishostingthis.com/mirrors/apache/httpcomponents/httpclient/binary/httpcomponents-client-4.3.6-bin.tar.gz -o /tmp/httpcomponents-client-4.3.6-bin.tar.gz; \
		echo "Unpacking httpcomponents"; \
		tar xzf /tmp/httpcomponents-client-4.3.6-bin.tar.gz -C /tmp; \
		echo "Installing httpcomponents"; \
		sudo mkdir -p /opt/doorman/lib/httpcomponents-client-4.3.6; \
		sudo cp -r /tmp/httpcomponents-client-4.3.6/lib/*.jar /opt/doorman/lib/httpcomponents-client-4.3.6; \
		rm -rf /tmp/httpcomponents-client-4.3.6-bin.tar.gz /tmp/httpcomponents-client-4.3.6; \
		echo "httpcomponents-client-4.3.6 installed - location /opt/doorman/lib/httpcomponents-client-4.3.6"; \
	fi

